{
  // ---------------------------------------------------------------------------
  // Found this font order in a tutorial, may not be necessary
  "editor.fontFamily": "Iosevka, Consolas, 'Courier New', monospace",
  "editor.fontWeight": "400", // Normal
  "editor.fontSize": 18,
  "editor.fontLigatures": true,
  "editor.tabSize": 2,
  "editor.rulers": [
    80,
    120
  ],
  // ---------------------------------------------------------------------------
  "editor.detectIndentation": false, // Do not adapt to opened file indentation settings
  "[python]": {
    "editor.tabSize": 4, // 4 spaces in Python to respect PEP8
    "files.insertFinalNewline": true, // Empty line at end of file
  },
  "[typescriptreact]": {
    "files.insertFinalNewline": true, // Empty line at end of file
  },
  // ---------------------------------------------------------------------------
  "breadcrumbs.enabled": false, // No breadcrumbs above the editor
  "workbench.colorTheme": "Gruvbox Dark (Hard)", // Editor theme
  "workbench.activityBar.visible": false, // The vertical bar on the left
  "workbench.statusBar.feedback.visible": false, // Colorless is also available
  "workbench.startupEditor": "newUntitledFile", // Hide menu
  "workbench.editor.enablePreview": false, // Disable the preview on single click and open the file right away
  "workbench.colorCustomizations": {
    // Nuances can be generated with
    // https://superdevresources.com/tools/color-shades
    "statusBar.background": "#242729", // Status bar when a folder is open (code . for example)
    "statusBar.noFolderBackground": "#242729", // When no folder is open, I don't care so same color
    "statusBar.debuggingBackground": "#242729",
  },
  // ---------------------------------------------------------------------------
  "explorer.openEditors.visible": 0, // Separated space for all the opened files
  "window.titleBarStyle": "custom",
  "window.zoomLevel": 0,
  // ---------------------------------------------------------------------------
  "vim.hlsearch": true,
  "vim.leader": "<space>",
  "vim.normalModeKeyBindings": [
    {
      // Previous tab
      "before": [
        "<C-h>"
      ],
      "commands": [
        "workbench.action.previousEditor"
      ]
    },
    {
      // Jump a block down
      "before": [
        "<C-j>"
      ],
      "after": [
        "}"
      ]
    },
    {
      // Jump a block up
      "before": [
        "<C-k>"
      ],
      "after": [
        "{"
      ]
    },
    {
      // Next tab
      "before": [
        "<C-l>"
      ],
      "commands": [
        "workbench.action.nextEditor"
      ]
    },
    {
      // Remove highlight after search
      "before": [
        "q",
        "q"
      ],
      "commands": [
        ":nohl"
      ]
    }
  ],
  "vim.insertModeKeyBindings": [
    {
      "before": [
        "j",
        "j"
      ],
      "after": [
        "<Esc>"
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": [
        "<C-j>"
      ],
      "after": [
        "}"
      ]
    },
    {
      "before": [
        "<C-k>"
      ],
      "after": [
        "{"
      ]
    }
  ],
  // ---------------------------------------------------------------------------
  "C_Cpp.default.cppStandard": "c++17",
  "C_Cpp.default.intelliSenseMode": "clang-x64",
  // ---------------------------------------------------------------------------
  "eslint.validate": [ // Parse .js/.ts/.jsx/tsx
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "eslint.run": "onSave",
  // ---------------------------------------------------------------------------
  "python.linting.enabled": true,
  "python.linting.pep8Enabled": true,
  "python.linting.mypyEnabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.flake8Enabled": false,
  "python.linting.pydocstyleEnabled": false,
  // ---------------------------------------------------------------------------
  "crystal-lang.compiler": "/usr/local/bin/crystal",
  "crystal-lang.completion": true,
  "crystal-lang.hover": true,
  "crystal-lang.implementations": true,
  // ---------------------------------------------------------------------------
  // Server is at false for now as it breaks the autocompletion of
  // not imported packages
  "go.useLanguageServer": true,
  "[go]": {
    "editor.snippetSuggestions": "none",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": true
    },
  },
  "go.lintTool": "golangci-lint",
  "go.lintFlags": [
    "--fast"
  ],
  // Go settings that activate when the language server is disabled
  "go.formatTool": "goimports",
  "go.autocompleteUnimportedPackages": true,
  // ---------------------------------------------------------------------------
  "files.exclude": { // Files are not show in the UI explorer
    // Python stuff
    "**/__pycache__/": true,
    "**/*.pyc": true,
    "**/.mypy_cache/": true,
    // Jetbrains
    "**/.idea/": true,
    // JS modules
    "node_modules/": true,
  },
  "git.autofetch": true, // Fetch be fore pull
  "files.associations": {
    ".eslintrc": "jsonc",
    "*.prisma": "graphql"
  },
  "gitlens.views.repositories.location": "gitlens",
  "gitlens.views.fileHistory.location": "gitlens",
  "gitlens.views.lineHistory.location": "gitlens",
  "gitlens.views.compare.location": "gitlens",
  "gitlens.views.search.location": "gitlens",
  "gitlens.currentLine.enabled": false,
  "gitlens.codeLens.recentChange.enabled": false,
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.blame.line.enabled": false,
  "gitlens.codeLens.visibility": "ondemand",
  "extensions.ignoreRecommendations": false,
  "[prisma]": {},
}