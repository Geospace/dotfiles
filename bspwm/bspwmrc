#! /bin/sh

# The bspwmrc file is actually an executable shell script.
# So I prefer to keep the .xinitrc (and other X related configuration files)
# as tiny as possible and dump everything here.
# I don't know if there are benefits/downsides to this approach, but it
# works for me.

# Also, every program that is launched from here must be killed
# first! The reason is that I want to be able to "reset" my desktop
# by running this script (which is bound to :e ~

# Where the output of this script is logged to
exec &> ~/.bspwm_startup_log
echo ">> Log file set"

# Set keyboard layout
# Apparently there is a specific model configuration for the HHKB but I'm not
# sure it actually changes something
# Nothing to kill here, setxkbmap does not stay alive
setxkbmap -layout fr -model macintosh_hhk
echo ">> Keyboard layout set"

# I can't seem to find < and > by default so here they are
# (It replaces the upper two, which I never use anyway)
# Nothing to kill here, xmodmap does not stay alive
xmodmap -e "keycode 49 = less greater less greater bar brokenbar"
echo ">> < and > are now accessible"

# Setup monitors
# Sometimes resolution has to be set explicitly here
# Nothing to kill here, xrandr does not stay alive
xrandr --output DP-0 --primary --auto --left-of DP-2 --output DP-2 --auto
echo ">> Screens position set"

# Avoid the ugly "cross" default X cursor
# Nothing to kill here, xsetroot does not stay alive
xsetroot -cursor_name left_ptr &
echo ">> X cursor set"

# Make sure that imwheel is running
# This allows to have a faster scrolling speed
# It think the software itself is completely deprecated but it works
# and there is no solution to control scroll speed with libinput
# to my knowledge so...
imwheel --focus --kill
echo ">> Scroll speed fixed"

# Light the mouse up
razer-lights
echo ">> Razer lights up"

# Make sure the compositor is always started
killall -q picom
while pgrep -u $UID -x picom >/dev/null; do sleep 1; done
picom --experimental-backends &
echo ">> picom launched"

# Make sure we always have our bars
killall -q polybar
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
polybar main -c ~/.config/polybar/config.ini &
polybar alternate -c ~/.config/polybar/config.ini &
echo ">> polybar launched"

# Make sure we have a notification daemon
killall -q dunst
while pgrep -u $UID -x dunst >/dev/null; do sleep 1; done
dunst &
echo ">> dunst launched"

# Make sure we have a screen saver
# Which is also used as a locker
killall -q xscreensaver
while pgrep -u $UID -x xscreensaver >/dev/null; do sleep 1; done
xscreensaver &
echo ">> xscreensaver launched"

# Also, start lightson+ in order to try disabling the screen saver
# when there is some kind of media running
# The delay parameter has to be lower than xscreensaver's timeout
# Not really needed to kill it as it does not start if another instance is running
# TODO Still, kill it first
lightson+ \
  --delay 4 \
  --audio 1 \
  --vlc 1 \
  --chromium-flash 1 \
  --webkit-flash 1 \
  --html5 1 &
echo ">> lightson+ launched"

# Get a bluetooth applet
# Killing blueman does NOT interrupt active bluetooth connections
killall -q blueman-applet
while pgrep -u $UID -x blueman-applet >/dev/null; do sleep 1; done
killall -q blueman-manager
while pgrep -u $UID -x blueman-manager >/dev/null; do sleep 1; done
killall -q blueman-adapters
while pgrep -u $UID -x blueman-adapters >/dev/null; do sleep 1; done
blueman-applet &
echo ">> blueman launched"

# Set a wallpaper
feh --bg-fill ~/Pictures/wallpapers/current
# echo ">> Wallpaper set"

# Or set a solid color
# hsetroot -solid "#ddd"
# echo ">> Solid wallpaper set"

# Start a clipboard manager
# Allows for unification and history with rofi later on
# (see the sxhkd configuration)
killall -q greenclip
while pgrep -u $UID -x greenclip >/dev/null; do sleep 1; done
greenclip daemon &
echo ">> greenclip started"

# And start the keyboard daemon
killall -q sxhkd
while pgrep -u $UID -x sxhkd >/dev/null; do sleep 1; done
sxhkd -m 1 &
echo ">> sxhkd launched"

# And get an alt+tab switcher
# killall -q alttab
# while pgrep -u $UID -x alttab >/dev/null; do sleep 1; done
# alttab \
#   -d 2 \
#   -mk "Super_L" \
#   -ck "Escape" \
#   -i 128x128 \
#   -t 128x128 \
#   -bg "#eeeeee" \
#   -frame "#e53935" \
#   &

# Finally, some bspwm configuration

bspc monitor DP-0 -d I II III IV V
bspc monitor DP-2 -d VI VII VIII IX X

bspc config border_width          4
bspc config window_gap           20

# bspc config single_monocle      true
# bspc config gapless_monocle     true
# bspc config borderless_monocle  true

bspc config normal_border_color  "#bbbbbb"
bspc config active_border_color  "#bbbbbb"
bspc config focused_border_color "#be4678"

bspc rule -a "Bitwarden" state=floating
bspc rule -a "Pcmanfm" state=floating
bspc rule -a "JetBrains Toolbox" state=floating
bspc rule -a "Zathura" state=tiled

# Monitor node states in order to only apply shadows (via Picom)
# to floating windows
# bspc subscribe node_state | while read -r _ _ _ node state status; do
#   if [[ "$state" == "floating" ]]; then
#     case "$status" in
#       off) xprop -id "$node" -remove _PICOM_SHADOW;;
#       on) xprop -id "$node" -f _PICOM_SHADOW 32c -set _PICOM_SHADOW 1;;
#     esac
#   fi
# done
