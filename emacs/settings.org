* Server

Start Emacs sever so that we can open file from other places (mostly the
terminal emulator) in Emacs.


#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* Fanfare

Tweak Emacs defaults to make it a bit more /discrete/.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t ; Hide the "welcome" screen
        initial-scratch-message nil) ; No comments in the scratch buffer

  (defun display-startup-echo-area-message () nil) ; Hide the "For information..." message

  (tool-bar-mode 0) ; Hide the tool bar
  (tooltip-mode 0) ; Hide any tooltip
  (menu-bar-mode 0) ; Hide the menu bar
  (toggle-scroll-bar 0) ; Hide the scroll bar
#+END_SRC

* =customize=

Make =customize= only write into its own file, than we can load.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

* Backups

Control where Emacs write backup files.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

* Variables

Define variables to be used throughout the configuration.

#+BEGIN_SRC emacs-lisp
  (setq configuration-file-path "~/.emacs.d/init.el")
  (setq confiorgation-file-path "~/.emacs.d/settings.org")
#+END_SRC

* Functions

Define functions to be used throughout the configuration.

#+BEGIN_SRC emacs-lisp
  (defun reload-emacs ()
    "Reload emacs"
    (interactive)
    (load-file configuration-file-path))
#+END_SRC

* =use-package=

A macro to help you "isolate package configuration". It "is not a package
manager".

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

Theme

Make sure to set up the theme before faces configuration, as most themes
overwrite them.

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi t))
#+END_SRC

* Faces

This does not look very /scalable/. I guess there are other ways to maintain
faces?

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Slab" :height 140)
  (set-face-attribute 'org-block-begin-line nil :font "Iosevka" :height 140)
  (set-face-attribute 'org-block-end-line nil :font "Iosevka" :height 140)
  (set-face-attribute 'org-block nil :font "Iosevka" :height 140)
  (set-face-attribute 'org-verbatim nil :font "Iosevka" :height 140)
#+END_SRC

* =org=

The package itself is loaded in =init.el= as I store my configuration in Org
format. But the configuration is done here.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded t)
  (setq org-startup-indented t)
#+END_SRC

* =general=

Help defines keybindings in a consistent way. It's great to load it before other
packages as it enables the =:general= /section/ in =use-package= but I don't
really use it myself. I prefer to define all the bindings in the same place.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)

  ;; Thanks to this block then we can use my-leader-def
  ;; to define bindings which use the leader key as their root.
  (general-create-definer my-leader-def
    :prefix "SPC")
#+END_SRC

* =undo-fu=

Act as an undo/redo system for =evil=.

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :ensure t)
#+END_SRC

* =evil=

Brrrrrr!
  
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          ;; There may be other state-messages but I have not encountered them
          ;; yet I guess
          evil-insert-state-message nil
          evil-visual-state-message nil
          ;; End of state-messages
          evil-want-keybinding nil ; Required by evil-collection
          evil-replace-state-message nil
          evil-search-module 'evil-search
          evil-undo-system 'undo-fu)
    :config
    (evil-mode))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

* =ivy=

"Ivy is a generic completion mechanism for Emacs."

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-height 10
          ivy-fixed-height-minibuffer t
          ivy-count-format "%d/%d "
          ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :config (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :config (ivy-rich-mode 1))
#+END_SRC

* =counsel=

"Counsel provides versions of common Emacs commands that are customised to make
the best use of Ivy."

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC

* =dired=

The =dired= package itself is built into Emacs, but it is extended and
configured here.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

* =auto-fill-mode=

For text documents, do not let lines go beyound 80 characters. This does not
apply to code.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

* =diminish=

Hide the minor modes we don't care about in the status line.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))
    (diminish 'auto-fill-function)
    (diminish 'all-the-icons-dired-mode)
    (diminish 'ivy-mode))
#+END_SRC

* Bindings

Every binding starts with =leader=.

#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :keymaps 'normal
    "a h" 'evil-window-left
    "a j" 'evil-window-down
    "a k" 'evil-window-up
    "a l" 'evil-window-right
    "a q" 'evil-quit
    "a d" 'evil-delete-buffer
    "a s" 'evil-window-split
    "a v" 'evil-window-vsplit
    "a z" 'evil-write
    "a Z" 'evil-write-all
    "a n" 'evil-ex-nohighlight

    "s" 'swiper
    "S" 'swiper-al
    "r" 'reload-emacs

    "e" 'counsel-find-file
    "?" 'counsel-describe-symbol
    ":" 'counsel-M-x

    "SPC" 'counsel-switch-buffer)
#+END_SRC

* =command-log-mode=

Display all commands which are ran! I use to debug my configuration.

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+END_SRC

* Void

When I don't know where to put it!

#+BEGIN_SRC emacs-lisp
  ;; Load this configuration file on startup
  (find-file confiorgation-file-path)
#+END_SRC
