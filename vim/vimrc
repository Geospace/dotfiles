"Plugins, managed via Plug
call plug#begin('~/.vim/plugged')
Plug 'chriskempson/base16-vim'
Plug 'itchyny/lightline.vim'
Plug 'Andilutten/vim-base16-lightline'
Plug 'junegunn/fzf.vim'
Plug 'markonm/traces.vim'
Plug 'dag/vim-fish'
Plug 'tpope/vim-commentary'
Plug 'chrisbra/Colorizer'
call plug#end()

"Sync base16 colorscheme with base16-shell
if filereadable(expand("~/.vimrc_background"))
  set termguicolors "Enable true colors
  set background=dark "Chose the base16 variant
  let base16colorspace=256
  source ~/.vimrc_background "Apply the theme set via baes16-shell
endif

"Change the leader to space
"Has to be done before further configuration read the <leader> value
let mapleader=" "

"Don't wrap code (let if get off screen)
set nowrap

"Basic syntaxtic support
syntax on
filetype plugin indent on

"Replace tabs with 2 spaces
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

"Allow for multiple unsaved buffers
set hidden

"Split mapping
nnoremap <silent> <leader>s :split<cr>
nnoremap <silent> <leader>S :vsplit<cr>
nnoremap <silent> <leader>q :quit<cr>

"Buffer mappings
nnoremap <silent> <c-h> :bprev<cr>
nnoremap <silent> <c-l> :bnext<cr>

"Write mappings
nnoremap <silent> <leader>z :w<cr>
nnoremap <silent> <leader>a :wa<cr>

"Quickly remove highlighting
nnoremap <silent> <leader><esc> :nohlsearch<cr>

"Toggle line number (off by default)
nnoremap <silent> <leader>n :set number!<cr>

"We don't really need q so let's use it to access
"a character that is hard to get
nnoremap <silent> q ~

"fzf mappings
nnoremap <silent> <leader>f :Files<cr>
nnoremap <silent> <leader>F :GFiles<cr>
nnoremap <silent> <leader>g :Rg<cr>
nnoremap <silent> <leader>/ :BLines<cr>
nnoremap <silent> <leader><leader> :Buffers<cr>

"Forget Vi compatible backspacing
set backspace=indent,eol,start

"Configure fillchars
set fillchars+=vert:\|

"Lightline configuration
let g:lightline = { 'colorscheme': 'base16' }

"Lightline inactive colors
let s:palette = g:lightline#colorscheme#{g:lightline.colorscheme}#palette
let s:palette.inactive.left = [ [ '#aaaaaa', '#cccccc', 'Red', 'Red' ] ]
let s:palette.inactive.middle = [ [ '#aaaaaa', '#cccccc', 'Red', 'Red' ] ]
let s:palette.inactive.right = [ [ '#aaaaaa', '#cccccc', 'Red', 'Red'] ]

"Always show the statusline
set laststatus=2

"Hide the mode (shown by the statusline)
set noshowmode

"Show less things in the command area
set noshowcmd

"Better command autocompletion
set wildmenu

"Incremental search
set incsearch

"Ignore case on search
set ignorecase

"Highlight all matches
set hlsearch

"Change the appearance of the separators
highlight VertSplit guibg=NONE guifg=#cccccc

"Disable fzf preview window
let g:fzf_preview_window = ''

"Make fzf appear in a floating window
let g:fzf_layout = { 'window': { 'width': 0.7, 'height': 0.6, 'border': 'sharp' } }

"Make fzf respect the colorscheme's colors
let g:fzf_colors =
      \{
      \  'fg':      ['fg', 'Normal'],
      \  'bg':      ['bg', 'Normal'],
      \  'hl':      ['fg', 'Comment'],
      \  'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \  'bg+':     ['bg', 'Normal', 'CursorColumn'],
      \  'hl+':     ['fg', 'Statement'],
      \  'info':    ['fg', 'PreProc'],
      \  'border':  ['fg', 'Ignore'],
      \  'prompt':  ['fg', 'Conditional'],
      \  'pointer': ['fg', 'Exception'],
      \  'marker':  ['fg', 'Keyword'],
      \  'spinner': ['fg', 'Label'],
      \  'header':  ['fg', 'Comment']
      \}
